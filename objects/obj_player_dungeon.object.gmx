<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_head</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0;
image_angle = random(360);

player = 0;

player_x = room_width/2;
player_y = room_width/2;

shoot_speed = 3;
hp_regen_speed = 2;
up = ord("W");
down = ord("S");
left = ord("A");
right = ord("D");
go = true;
spd = 5;
mass=700; 
f_index = 0;
f_spd = 0.15;
b_index = 1;
b_angle = image_angle;
h_angle = image_angle;
s_play = true;
c_shoot = true;
timer = room_speed/shoot_speed;
look_at_x = obj_mouse_dungeon.x;
look_at_y = obj_mouse_dungeon.y;
look_at_update = 0;
finish_x = x;
finish_y = y;

hp = 100;
max_health = hp;
hp_regen = room_speed/hp_regen_speed;
ammo = 10;
ammo_max = ammo;
reloading = false;

alarm[2] = hp_regen;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if go = true {
    if hp &lt; max_health {
    hp += 0.5;
    }
alarm[2] = hp_regen;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Blood alarm
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Can shoot alarm
c_shoot=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string> ///Shoot

//Check for shooting!
if go
{
if ammo &gt;= 1 {
    //Check for mouse button
    if look_at_update = -1 {
        if mouse_check_button(mb_left)
            {
            //Check for the shooting variable
            if c_shoot
                if reloading = false {
                    {
                    repeat(1) {
                    //Setup vars
                    var xx, yy, mod_dif;
                    c_shoot=false;                                          //Set shoot var to false
                    alarm[0] = timer;                                       //Set shoot alarm
                    audio_play_sound(snd_shoot, 0, false);                  //Play shot sound
                    mod_dif = b_angle + 3 - random(6);                      //Set the random angle for bullet variation
                    xx = x + lengthdir_x(20, mod_dif);                      //get the x/y position to create the bullet
                    yy = y + lengthdir_y(20, mod_dif);
                    instance_create(xx, yy, obj_flash);                     //Create the muzzle flash
                    ammo--;
                        with (instance_create(xx,yy,obj_player_bullet))         //create the bullet
                            {
                            dir = mod_dif;                                      //Set the bullet directiom
                            }
                        //Now we will create the bullet casing as a nice special effect
                        with (instance_create(x + lengthdir_x(18, b_angle), y + lengthdir_y(18, b_angle), obj_casing))
                            {
                            image_index = 0;
                            direction = (other.b_angle + 90) - 15 + random(30);
                            image_angle = direction - 90;
                            }
                        }
                    }
                }
            }
        }
    
    //Check for controller button
    if look_at_update != -1 {
        if gamepad_button_check(look_at_update, gp_shoulderr)
            {
            //Check for the shooting variable
            if c_shoot
                if reloading = false {
                    {
                    repeat(1) {
                    //Setup vars
                    var xx, yy, mod_dif;
                    c_shoot=false;                                          //Set shoot var to false
                    alarm[0] = timer;                                       //Set shoot alarm
                    audio_play_sound(snd_shoot, 0, false);                  //Play shot sound
                    mod_dif = b_angle + 3 - random(6);                      //Set the random angle for bullet variation
                    xx = x + lengthdir_x(20, mod_dif);                      //get the x/y position to create the bullet
                    yy = y + lengthdir_y(20, mod_dif);
                    instance_create(xx, yy, obj_flash);                     //Create the muzzle flash
                    ammo--;
                        with (instance_create(xx,yy,obj_player_bullet))         //create the bullet
                            {
                            dir = mod_dif;                                      //Set the bullet directiom
                            }
                        //Now we will create the bullet casing as a nice special effect
                        with (instance_create(x + lengthdir_x(18, b_angle), y + lengthdir_y(18, b_angle), obj_casing))
                            {
                            image_index = 0;
                            direction = (other.b_angle + 90) - 15 + random(30);
                            image_angle = direction - 90;
                            }
                        }
                    }
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player Movement
if go
{
var i, move_check, h_spd, v_spd;
//Base speed vars
h_spd = 0;
v_spd = 0;
//Check keys
if look_at_update = -1 {

} else {

}

grid = mp_grid_create(0,0,room_width/32,room_height/32,32,32);
path = path_add();
mp_grid_add_instances(grid,obj_wall,1);
mp_grid_path(grid,path,x,y,finish_x,finish_y,1);
path_start(path,spd,"",1);

//Now move the instance "virtually" while checking for collisions
//First the horizontal check
for (i = abs(h_spd); i &gt; 0; i -= 1;)
    {
    move_check = sign(h_spd) * i;
    if !place_meeting(x + move_check, y, obj_wall) {x += move_check; break;} //no collision on full speed so break the loop and move the instance
    if !place_meeting(x + move_check, y - i, obj_wall) y -= (i / 2);
    if !place_meeting(x + move_check, y + i, obj_wall) y += (i / 2);  
    }
//The vertical check
for (i = abs(v_spd); i &gt; 0; i -= 1;)
    {
    move_check = sign(v_spd) * i;
    if !place_meeting(x , y + move_check, obj_wall) {y += move_check; break;}//no collision on full speed so break the loop and move the instance
    if !place_meeting(x - i,y + move_check, obj_wall) x -= (i / 2);
    if !place_meeting(x + i,y + move_check, obj_wall) x += (i / 2);
    }
//If we are moving, animate the legs and make footsteps...
if x = xprevious &amp;&amp; y = yprevious
    {
    //Stop animating the legs and stop footsteps
    f_index = 0;
    if !s_play audio_stop_sound(snd_footsteps);
    s_play = true;
    }
else
    {
    //Animate the legs manually
    f_index += f_spd;
    if f_index &gt; 6.5 f_index = -0.5;
    if s_play
        {
        //Loop footsteps
        audio_play_sound(snd_footsteps, 0, true);
        s_play = false;
        }
    }
//make character point towards mouse
var dd,ts;
dd = ((((point_direction(x,y,look_at_x,look_at_y) - h_angle) mod 360) + 540) mod 360) - 180; //get the head rotation
h_angle += min(abs(dd), 10) * sign(dd);  
dd = ((((h_angle - b_angle) mod 360) + 540) mod 360) - 180; // Get the body rotation
ts = abs(dd) / 6;
if abs(dd) &lt; ts b_angle = h_angle else b_angle += sign(dd) * ts;
var iii = look_at_update;
    if instance_exists(obj_enemy) {
        with instance_nearest(x,y,obj_enemy) {
        var xxx = x;
        var yyy = y;
        }
    } else {
        with obj_mouse_dungeon {
            if device = iii {
            var xxx = x;
            var yyy = y;
            }
        }
    }
look_at_x = xxx;
look_at_y = yyy;

var iii = look_at_update;
var iiii = player;
    if hp &lt;= 0 {
    go = false;
    mass=100000;
        with obj_mouse {
            if device = iii {
            go = false;
            visible = false;
            }        
        }
    scr_enemy_follow_random(obj_enemy);
    scr_enemy_follow_random(obj_enemy_boss);
    }
    
    if reloading = true {
    b_index++;
    ammo+=1;
        if b_index = 20 {
        reloading = false;
        b_index = 1;
        ammo = ammo_max;
        }
    }
    
    if ammo &lt;= 0 {
    reloading = true;
    var snd = audio_play_sound(snd_reload,0,false);
    audio_sound_pitch(snd,0.5);
    }
}

//Update the player position for the AI
player_x=x;
player_y=y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_collision_parent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision checks

//Set up vars
var a,xoff,yoff,om,mm,mag;

a = point_direction(x, y, other.x, other.y);    //Get the direction from the colliding object
xoff = lengthdir_x(1, a);                       //Get the offset vector
yoff = lengthdir_y(1, a);
om = other.mass / mass;                         //start the fake "physics mass" calculations
mm = mass / other.mass;
mag = sqrt((om * om) + (mm * mm));
om /= mag;
mm /= mag;

//Move out of collision
while (place_meeting(x, y, other.id))
{
x -= xoff * om; //Move the instance out of collision
y -= yoff * om;
other.x += xoff * mm; //Move the other instance out of the collision
other.y += yoff * mm;
}

//Check to see if we have collided with an enemy
switch (other.object_index)
{
//We use a switch so that we can add new enemies in as we wish
case obj_enemy:
    if alarm[1] &lt; 0
        {
        alarm[1] = room_speed / 2;                  //This alarm prevents a constant damage
        hp -= other.dmg;                            //Remove health
        with (instance_create(x,y,obj_decal))       //Create some blood!!!
            {
            audio_play_sound(choose(snd_blood_1, snd_blood_2, snd_blood_3), 0, false);
            shadow = false;
            dist = 0;
            sprite_index = spr_blood;
            image_speed = 0;
            image_xscale = 0.5 + random(0.5);
            image_yscale = 0.5 + random(0.5);
            speed = 0;
            image_angle = random(360)
            }
        }
    break;
case obj_enemy_boss:
    if alarm[1] &lt; 0
        {
        alarm[1] = room_speed / 2;                  //This alarm prevents a constant damage
        hp -= other.dmg;                            //Remove health
        with (instance_create(x,y,obj_decal))       //Create some blood!!!
            {
            audio_play_sound(choose(snd_blood_1, snd_blood_2, snd_blood_3), 0, false);
            shadow = false;
            dist = 0;
            sprite_index = spr_blood;
            image_speed = 0;
            image_xscale = 0.5 + random(0.5);
            image_yscale = 0.5 + random(0.5);
            speed = 0;
            image_angle = random(360)
            }
        }
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_decal">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if sprite_index = spr_money {
global.money += round((image_xscale + image_yscale)*10)*2;
instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Room loop

//prevent the player from leaving the room.
if x &lt; 0
{
x += room_width
}
else
{
if x &gt; room_width x -= room_width;
}

if y &lt; 0
{
y += room_height
}
else
{
if y &gt; room_height y -= room_height;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if hp &gt; 0 {
//Draw legs and shadow..
draw_sprite_ext(sprite_index, f_index, x - 2, y + 2, image_xscale, image_yscale, h_angle, c_black, 0.5);
draw_sprite_ext(sprite_index, f_index, x, y, image_xscale, image_yscale, h_angle, image_blend, image_alpha);
//Draw body and shadow...
draw_sprite_ext(spr_player_head, b_index, x - 5, y + 5, image_xscale, image_yscale, b_angle, c_black, 0.5);
draw_sprite_ext(spr_player_head, b_index, x, y, image_xscale, image_yscale, b_angle, image_blend, image_alpha);
if look_at_update = -1 {
draw_sprite_ext(spr_player_head, b_index, x, y, image_xscale, image_yscale, b_angle, c_blue, 0.5);
} else if look_at_update = 0 {
draw_sprite_ext(spr_player_head, b_index, x, y, image_xscale, image_yscale, b_angle, c_red, 0.5);
} else 
//Draw head and shadow
draw_sprite_ext(spr_player_head, 0, x - 5, y + 5, image_xscale, image_yscale, h_angle, c_black, 0.3);
draw_sprite_ext(spr_player_head, 0, x, y, image_xscale, image_yscale, h_angle, image_blend, image_alpha);
//Draw health
var hp_bar, ammo_bar;
hp_bar = (hp / max_health) * 100;
ammo_bar = (ammo / ammo_max) * 100;
draw_healthbar(x - 24, y - 34, x + 24, y - 32, hp_bar, c_black, c_red, c_lime, 0, true, true);
draw_healthbar(x - 24, y - 42, x + 24, y - 40, ammo_bar, c_black, c_yellow, c_yellow, 0, true, true);
} else {
draw_sprite_ext(sprite_index, f_index, x - 2, y + 2, image_xscale, image_yscale, h_angle, c_black, 0.5);
draw_sprite_ext(spr_player_head, 1, x - 5, y + 5, image_xscale, image_yscale, b_angle, c_black, 0.5);
draw_sprite_ext(spr_player_head, 0, x - 5, y + 5, image_xscale, image_yscale, h_angle, c_black, 0.3);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
