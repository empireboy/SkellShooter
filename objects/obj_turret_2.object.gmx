<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_turret</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-200</depth>
  <persistent>0</persistent>
  <parentName>self</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0;
image_index = 1;
image_angle = 0;
depth = -9999;

state = "place";

shoot_speed = 5;
go = true;
mass=100000;
h_angle=image_angle;
c_shoot = true;
timer = room_speed/shoot_speed;
look_at_x = 0;
look_at_y = 0;
range = 300;

hp = 200;
max_health = hp;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Blood alarm
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Can shoot alarm
c_shoot=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shoot

//Check for shooting!
if go {
//Check for mouse button
    //Check for the shooting variable
    if c_shoot {
        if (instance_exists(obj_enemy) || instance_exists(obj_enemy_boss)) {
            if (distance_to_object(obj_enemy)&lt;range || distance_to_object(obj_enemy_boss)&lt;range) {
            //Setup vars
            var xx, yy, mod_dif;
            c_shoot=false;                                          //Set shoot var to false
            alarm[0] = timer;                                       //Set shoot alarm
            var snd = audio_play_sound(snd_shoot, 0, false);                  //Play shot sound
            audio_sound_gain(snd, 0.3, 0);
            mod_dif = h_angle + 3 - random(6);                      //Set the random angle for bullet variation
            xx = x + lengthdir_x(20, mod_dif);                      //get the x/y position to create the bullet
            yy = y + lengthdir_y(20, mod_dif);
            instance_create(xx, yy, obj_flash);                     //Create the muzzle flash
            with (instance_create(xx,yy,obj_player_bullet))         //create the bullet
                {
                dir = mod_dif;                                      //Set the bullet directiom
                }
            //Now we will create the bullet casing as a nice special effect
            with (instance_create(x + lengthdir_x(18, h_angle), y + lengthdir_y(18, h_angle), obj_casing))
                {
                image_index = 0;
                direction = (other.h_angle + 90) - 15 + random(30);
                image_angle = direction - 90;
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if state = "place" || state = "not_place" {
x = mouse_x;
y = mouse_y;
}

if state = "place" || state = "not_place" {
    if place_meeting(x,y,obj_wall) {
    state = "not_place";
    } else if place_meeting(x,y,obj_wall_invisible) {
    state = "not_place";
    } else if place_meeting(x,y,obj_wall_move) {
    state = "not_place";
    } else if place_meeting(x,y,obj_player) {
    state = "not_place";
    } else if place_meeting(x,y,obj_turret) {
    state = "not_place";
    } else if place_meeting(x,y,obj_turret_2) {
    state = "not_place";
    } else {
    state = "place";
    }
}

if state = "shoot" {
    if go = true
    {
    //make character point towards mouse
    var dd,ts;
    dd = ((((point_direction(x,y,look_at_x,look_at_y) - h_angle) mod 360) + 540) mod 360) - 180; //get the head rotation
    h_angle += min(abs(dd), 10) * sign(dd);
    if instance_exists(obj_enemy) {
    look_at_x = instance_nearest(x, y, obj_enemy).x;
    look_at_y = instance_nearest(x, y, obj_enemy).y;
    }
    if instance_exists(obj_enemy_boss) {
    look_at_x = instance_nearest(x, y, obj_enemy_boss).x;
    look_at_y = instance_nearest(x, y, obj_enemy_boss).y;
    }
    }
    
    if hp &lt;= 0 {
    instance_destroy();
    }
}

if state = "place" {
    if mouse_check_button_pressed(mb_left) {
    state = "shoot";
    global.money -= 2500;
    depth = -200;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_collision_parent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision checks

if other.object_index != obj_wall_move {
//Set up vars
var a,xoff,yoff,om,mm,mag;

a = point_direction(x, y, other.x, other.y);    //Get the direction from the colliding object
xoff = lengthdir_x(1, a);                       //Get the offset vector
yoff = lengthdir_y(1, a);
om = other.mass / mass;                         //start the fake "physics mass" calculations
mm = mass / other.mass;
mag = sqrt((om * om) + (mm * mm));
om /= mag;
mm /= mag;

//Move out of collision
if state = "shoot" {
    while (place_meeting(x, y, other.id))
    {
    x -= xoff * om; //Move the instance out of collision
    y -= yoff * om;
    other.x += xoff * mm; //Move the other instance out of the collision
    other.y += yoff * mm;
    }
}

//Check to see if we have collided with an enemy
switch (other.object_index)
{
//We use a switch so that we can add new enemies in as we wish
case obj_enemy:
    if alarm[1] &lt; 0
        {
        alarm[1] = room_speed / 2;                  //This alarm prevents a constant damage
        hp -= other.dmg;                            //Remove health
        }
    break;
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Draw head and shadow
if state = "not_place" {
draw_sprite_ext(spr_turret, 3, x, y, image_xscale, image_yscale, h_angle, image_blend, image_alpha);
} else {
draw_sprite_ext(spr_turret, 1, x, y, image_xscale, image_yscale, h_angle, image_blend, image_alpha);
}
//Draw health
var hp_bar;
hp_bar = (hp / max_health) * 100;
draw_healthbar(x - 24, y - 34, x + 24, y - 32, hp_bar, c_black, c_red, c_lime, 0, true, true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
