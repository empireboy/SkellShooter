<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for(var i = 0; i &lt; global.max_players + 1; i++) {
controller_connected[i] = false;
player_x[i] = 0;
player_y[i] = 0;
upgrade_selected[i] = false;
}

level = 0;
level_next = 5;
state = "wave";
start_time = 0;
start_check = true;
wave = 1;
gameover_check = true;
gameover_time = room_speed * 5;
buy_item = 1;
buy_item_text = "Turret Mark 1";
buy_item_cost = 1000;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>game_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(obj_pause) {
    if obj_pause.pause = false {
    start_time -= 1;
    
        if start_time != 0 {
        alarm[1] = room_speed;
        } else {
        alarm[0] = 1;
        }
    }
} else {
start_time -= 1;

    if start_time != 0 {
    alarm[1] = room_speed;
    } else {
    alarm[0] = 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if state = "wave" {
    //Create the enemy outside of the room
    if instance_number(obj_enemy) &lt; 3
    {
    if instance_number(obj_enemy_boss) &lt;= 0
    {
        if level_next != 1 {
        repeat(1 + level)
            {
            instance_create(-16 - random(64), (room_height / 2) - 80 + random(160), obj_enemy);
            instance_create(room_width + 16 + random(64), (room_height / 2) - 80 + random(160), obj_enemy);
            instance_create((room_width / 2) - 64 + random(128), -16 - random(64), obj_enemy);
            instance_create((room_height / 2) - 64 + random(128), room_height + 16 + random(64), obj_enemy); 
            }
        level += 1;
        level_next -= 1;
        }
        else
        {
        instance_create(-16 - random(64), (room_height / 2), obj_enemy_boss);
        instance_create(room_width + 16 + random(64), (room_height / 2), obj_enemy_boss);
        instance_create((room_width / 2), -16 - random(64), obj_enemy_boss);
        instance_create((room_height / 2), room_height + 16 + random(64), obj_enemy_boss); 
        level += 1;
        level_next -= 1;
        }
    }
    }
    
    //Reset the alarm!
    if level_next != 0 {
    alarm[0] = room_speed;
    } else {
    state = "upgrade";
    audio_stop_all();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_create_players();

scr_change_fullscreen();

scr_get_player_positions();

//scr_change_view_size(128*3,2*4,32*3,32*4);

scr_create_pause();

if global.players_connected = 1 {
    if state = "upgrade" {
        if instance_number(obj_enemy_boss) &lt;= 0 {
            if upgrade_selected[1] = true {
            state = "buy";
            upgrade_selected[1] = false;
            wave++;
            }
        }
    }
} else if global.players_connected = 2 {
    if state = "upgrade" {
        if instance_number(obj_enemy_boss) &lt;= 0 {
            if (upgrade_selected[1] = true &amp;&amp; upgrade_selected[2] = true) {
            state = "buy";
            upgrade_selected[1] = false;
            upgrade_selected[2] = false;
            wave++;
            }
        }
    }
} else if global.players_connected = 3 {
    if state = "upgrade" {
        if instance_number(obj_enemy_boss) &lt;= 0 {
            if (upgrade_selected[1] = true &amp;&amp; upgrade_selected[2] = true &amp;&amp; upgrade_selected[3] = true) {
            state = "buy";
            upgrade_selected[1] = false;
            upgrade_selected[2] = false;
            upgrade_selected[3] = false;
            wave++;
            }
        }
    }
} else if global.players_connected = 4 {
    if state = "upgrade" {
        if instance_number(obj_enemy_boss) &lt;= 0 {
            if (upgrade_selected[1] = true &amp;&amp; upgrade_selected[2] = true &amp;&amp; upgrade_selected[3] = true &amp;&amp; upgrade_selected[4] = true) {
            state = "buy";
            upgrade_selected[1] = false;
            upgrade_selected[2] = false;
            upgrade_selected[3] = false;
            upgrade_selected[4] = false;
            wave++;
            }
        }
    }
}

if state = "upgrade" {
    if instance_number(obj_enemy_boss) &lt;= 0 {
        with obj_enemy { instance_destroy(); }
        with obj_player { if go = true { go = false; }}
        audio_stop_all();
    }
}

var p1, p2, p3, p4;
p1 = false;
p2 = false;
p3 = false;
p4 = false;
if gameover_check = true {
    if global.players_connected = 1 {
        with obj_player {
            if player = 1 {
                if hp &lt;= 0 {
                p1 = true;
                }
            }
        }
        if (p1 = true) {
        gameover_check = false;
        alarm[2] = gameover_time;
        }
    } else if global.players_connected = 2 {
        with obj_player {
            if player = 1 {
                if hp &lt;= 0 {
                p1 = true;
                }
            }
            if player = 2 {
                if hp &lt;= 0 {
                p2 = true;
                }
            }
        }
        if (p1 = true &amp;&amp; p2 = true) {
        gameover_check = false;
        alarm[2] = gameover_time;
        }
    } else if global.players_connected = 3 {
        with obj_player {
            if player = 1 {
                if hp &lt;= 0 {
                p1 = true;
                }
            }
            if player = 2 {
                if hp &lt;= 0 {
                p2 = true;
                }
            }
            if player = 3 {
                if hp &lt;= 0 {
                p3 = true;
                }
            }
        }
        if (p1 = true &amp;&amp; p2 = true &amp;&amp; p3 = true) {
        gameover_check = false;
        alarm[2] = gameover_time;
        }
    } else if global.players_connected = 4 {
        with obj_player {
            if player = 1 {
                if hp &lt;= 0 {
                p1 = true;
                }
            }
            if player = 2 {
                if hp &lt;= 0 {
                p2 = true;
                }
            }
            if player = 3 {
                if hp &lt;= 0 {
                p3 = true;
                }
            }
            if player = 4 {
                if hp &lt;= 0 {
                p4 = true;
                }
            }
        }
        if (p1 = true &amp;&amp; p2 = true &amp;&amp; p3 = true &amp;&amp; p4 = true) {
        gameover_check = false;
        alarm[2] = gameover_time;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_halign(fa_right);
draw_set_font(fnt_money);
draw_set_color(c_green);
draw_text(room_width-64, room_height-128, "$" + string(global.money));
draw_set_halign(fa_left);

draw_set_halign(fa_center);
draw_set_valign(fa_middle);
if start_time &gt; 0 {
    if start_check = false {
    draw_set_font(fnt_start_timer);
    draw_set_color(c_ltgray);
    draw_text(room_width/2, room_height/2, "First wave starts in " + string(start_time));
    }
}
draw_set_halign(fa_left);
draw_set_valign(fa_top);

if state = "upgrade" {
    if instance_number(obj_enemy_boss) = 0 {
        if global.players_connected &gt;= 1 {
            with obj_mouse {
                if player = 1 {
                var c = mouse_color;
                }
            }
            with obj_player {
                if player = 1 {
                var s, h, ss, hr;
                s = spd;
                h = max_health;
                ss = shoot_speed;
                hr = hp_regen_speed;
                }
            }
            draw_set_color(c_gray);
            draw_set_alpha(0.8);
            draw_rectangle(0, 0, room_width/2-1, room_height/2-1, false);
            draw_set_alpha(1);
            draw_set_color(c);
            draw_rectangle(0, 0, room_width/2-1, room_height/2-1, true);
            draw_rectangle(1, 1, room_width/2-2, room_height/2-2, true);
            draw_rectangle(2, 2, room_width/2-3, room_height/2-3, true);
            draw_set_font(fnt_start);
            draw_set_color(c_dkgray);
            draw_text(32, 64*1, "Player 1");
            
            if upgrade_selected[1] = false {
            draw_text(32, 64*3, "Movement speed: " + string(s));
            draw_text(300, 64*3, "+1");
            draw_sprite(spr_plus, 0, 400, 64*3+16);
            draw_text(32, 64*4, "Shoot speed: " + string(ss));
            draw_text(300, 64*4, "+1");
            draw_sprite(spr_plus, 0, 400, 64*4+16);
            draw_text(32, 64*5, "Max health: " + string(h));
            draw_text(300, 64*5, "+25");
            draw_sprite(spr_plus, 0, 400, 64*5+16);
            draw_text(32, 64*6, "Health regen: " + string(hr));
            draw_text(300, 64*6, "+1");
            draw_sprite(spr_plus, 0, 400, 64*6+16);
            }
        }
        if global.players_connected &gt;= 2 {
            with obj_mouse {
                if player = 2 {
                var c = mouse_color;
                }
            }
            with obj_player {
                if player = 2 {
                var s, h, ss, hr;
                s = spd;
                h = max_health;
                ss = shoot_speed;
                hr = hp_regen_speed;
                }
            }
            draw_set_color(c_gray);
            draw_set_alpha(0.8);
            draw_rectangle(room_width/2+1, 0, room_width, room_height/2-1, false);
            draw_set_alpha(1);
            draw_set_color(c);
            draw_rectangle(room_width/2+1, 0, room_width, room_height/2-1, true);
            draw_rectangle(room_width/2+2, 0, room_width, room_height/2-2, true);
            draw_rectangle(room_width/2+3, 0, room_width, room_height/2-3, true);
            draw_set_font(fnt_start);
            draw_set_color(c_dkgray);
            draw_text(room_width/2+32, 64*1, "Player 2");
            
            if upgrade_selected[2] = false {
            draw_text(room_width/2+32, 64*3, "Movement speed: " + string(s));
            draw_text(room_width/2+300, 64*3, "+1");
            draw_sprite(spr_plus, 0, room_width/2+400, 64*3+16);
            draw_text(room_width/2+32, 64*4, "Shoot speed: " + string(ss));
            draw_text(room_width/2+300, 64*4, "+1");
            draw_sprite(spr_plus, 0, room_width/2+400, 64*4+16);
            draw_text(room_width/2+32, 64*5, "Max health: " + string(h));
            draw_text(room_width/2+300, 64*5, "+25");
            draw_sprite(spr_plus, 0, room_width/2+400, 64*5+16);
            draw_text(room_width/2+32, 64*6, "Health regen: " + string(hr));
            draw_text(room_width/2+300, 64*6, "+1");
            draw_sprite(spr_plus, 0, room_width/2+400, 64*6+16);
            }
        }
        if global.players_connected &gt;= 3 {
            with obj_mouse {
                if player = 3 {
                var c = mouse_color;
                }
            }
            with obj_player {
                if player = 3 {
                var s, h, ss, hr;
                s = spd;
                h = max_health;
                ss = shoot_speed;
                hr = hp_regen_speed;
                }
            }
            draw_set_color(c_gray);
            draw_set_alpha(0.8);
            draw_rectangle(0, room_height/2+1, room_width/2-1, room_height, false);
            draw_set_alpha(1);
            draw_set_color(c);
            draw_rectangle(0, room_height/2+1, room_width/2-1, room_height, true);
            draw_rectangle(0, room_height/2+2, room_width/2-2, room_height, true);
            draw_rectangle(0, room_height/2+3, room_width/2-3, room_height, true);
            draw_set_font(fnt_start);
            draw_set_color(c_dkgray);
            draw_text(32, room_height/2+64*1, "Player 3");
            
            if upgrade_selected[3] = false {
            draw_text(32, room_height/2+64*3, "Movement speed: " + string(s));
            draw_text(300, room_height/2+64*3, "+1");
            draw_sprite(spr_plus, 0, 400, room_height/2+64*3+16);
            draw_text(32, room_height/2+64*4, "Shoot speed: " + string(ss));
            draw_text(300, room_height/2+64*4, "+1");
            draw_sprite(spr_plus, 0, 400, room_height/2+64*4+16);
            draw_text(32, room_height/2+64*5, "Max health: " + string(h));
            draw_text(300, room_height/2+64*5, "+25");
            draw_sprite(spr_plus, 0, 400, room_height/2+64*5+16);
            draw_text(32, room_height/2+64*6, "Health regen: " + string(hr));
            draw_text(300, room_height/2+64*6, "+1");
            draw_sprite(spr_plus, 0, 400, room_height/2+64*6+16);
            }
        }
        if global.players_connected &gt;= 4 {
            with obj_mouse {
                if player = 4 {
                var c = mouse_color;
                }
            }
            with obj_player {
                if player = 4 {
                var s, h, ss, hr;
                s = spd;
                h = max_health;
                ss = shoot_speed;
                hr = hp_regen_speed;
                }
            }
            draw_set_color(c_gray);
            draw_set_alpha(0.8);
            draw_rectangle(room_width/2+1, room_height/2+1, room_width, room_height, false);
            draw_set_alpha(1);
            draw_set_color(c);
            draw_rectangle(room_width/2+1, room_height/2+1, room_width, room_height, true);
            draw_rectangle(room_width/2+2, room_height/2+2, room_width, room_height, true);
            draw_rectangle(room_width/2+3, room_height/2+3, room_width, room_height, true);
            draw_set_font(fnt_start);
            draw_set_color(c_dkgray);
            draw_text(room_width/2+32, room_height/2+64*1, "Player 4");
            
            if upgrade_selected[4] = false {
            draw_text(room_width/2+32, room_height/2+64*3, "Movement speed: " + string(s));
            draw_text(room_width/2+300, room_height/2+64*3, "+1");
            draw_sprite(spr_plus, 0, room_width/2+400, room_height/2+64*3+16);
            draw_text(room_width/2+32, room_height/2+64*4, "Shoot speed: " + string(ss));
            draw_text(room_width/2+300, room_height/2+64*4, "+1");
            draw_sprite(spr_plus, 0, room_width/2+400, room_height/2+64*4+16);
            draw_text(room_width/2+32, room_height/2+64*5, "Max health: " + string(h));
            draw_text(room_width/2+300, room_height/2+64*5, "+25");
            draw_sprite(spr_plus, 0, room_width/2+400, room_height/2+64*5+16);
            draw_text(room_width/2+32, room_height/2+64*6, "Health regen: " + string(hr));
            draw_text(room_width/2+300, room_height/2+64*6, "+1");
            draw_sprite(spr_plus, 0, room_width/2+400, room_height/2+64*6+16);
            }
        }
    }
}

if state = "buy" {
draw_set_font(fnt_buy);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_set_color(c_ltgray);
draw_rectangle(room_width/2-200,100,room_width/2+200,100+100,false);
draw_set_color(c_black);
draw_rectangle(room_width/2-200,100,room_width/2+200,100+100,true);
draw_rectangle(room_width/2-200-1,100-1,room_width/2+200+1,100+100+1,true);
draw_rectangle(room_width/2-200-2,100-2,room_width/2+200+2,100+100+2,true);
draw_set_color(c_black);
draw_text(room_width/2,150,buy_item_text);
draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_text(room_width/2-200,216,"Cost: " +string(buy_item_cost));
draw_set_color(c_ltgray);
draw_triangle(room_width/2-250,100,room_width/2-300,150,room_width/2-250,200,false);
draw_set_color(c_black);
draw_triangle(room_width/2-250+1,100-1,room_width/2-300-1,150,room_width/2-250+1,200+1,true);
draw_triangle(room_width/2-250+2,100-2,room_width/2-300-2,150,room_width/2-250+2,200+2,true);
draw_triangle(room_width/2-250+3,100-3,room_width/2-300-3,150,room_width/2-250+3,200+3,true);
draw_set_color(c_ltgray);
draw_triangle(room_width/2+250,100,room_width/2+300,150,room_width/2+250,200,false);
draw_set_color(c_black);
draw_triangle(room_width/2+250-1,100-1,room_width/2+300+1,150,room_width/2+250-1,200+1,true);
draw_triangle(room_width/2+250-2,100-2,room_width/2+300+2,150,room_width/2+250-2,200+2,true);
draw_triangle(room_width/2+250-3,100-3,room_width/2+300+3,150,room_width/2+250-3,200+3,true);
draw_set_halign(fa_left);
draw_set_valign(fa_top);

draw_set_font(fnt_wave);
draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_set_color(c_red);
draw_text(32, 32, "Wave: "+string(wave));
draw_set_halign(fa_left);
draw_set_valign(fa_top);
}

if state = "wave" {
    if start_check = false {
        if start_time &gt; 0 {
        draw_set_halign(fa_right);
        draw_set_font(fnt_players_connected);
        draw_set_color(c_red);
        draw_text(room_width-64, 32, string(global.players_connected) + " players connected");
        draw_set_halign(fa_left);
        
        draw_set_font(fnt_wave);
        draw_set_halign(fa_left);
        draw_set_valign(fa_top);
        draw_set_color(c_red);
        draw_text(32, 32, "Wave: "+string(wave));
        draw_set_halign(fa_left);
        draw_set_valign(fa_top);
        }
    }
}

if gameover_check = false {
draw_set_halign(fa_center);
draw_set_font(fnt_gameover);
draw_set_color(c_black);
draw_text(room_width/2, room_height/2, "Game Over");
draw_set_halign(fa_left);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with obj_enemy { instance_destroy(); }
with obj_enemy_boss { instance_destroy(); }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
