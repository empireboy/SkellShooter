<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_skeleton</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>obj_collision_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Setup Variables

//Internals
alarm[0] = 1 + random(room_speed);      //Start alarm for attacking player
image_speed = 0.2;                      //Image speed
image_xscale = 6;                       //Set a random scale to add variety
image_yscale = image_xscale;            //Set the yscale to match

//Special vars
mass = 800;                                 //Fake "mass" for collisions
go = false;                                 //Controller
spd = 4;                                    //Movement speed
if spd &gt; 6 { spd = 6; }
hp = 10*obj_controller.level;               //Health points
hp_max = hp;
dmg = floor(image_xscale * 2);              //Damage the enemy does to the player
alarm[1] = irandom_range(50,400);

//Check where the enemy has been created and get the points 
//of entrance into the room for it..
if x &lt; 0
{
xx = 16;
yy = 405 + random(243);
}
else
{
if x &gt; room_width
    {
    xx = room_width - 16;
    yy = 405 + random(243);
    }
}

if y &lt; 0
{
xx = 432 + random(189);
yy = 16;
}
else
{
if y &gt; room_height
    {
    xx = 432 + random(189);
    yy = room_height - 16;
    }
}

ii = irandom(global.players_connected);
if ii = 0 { ii = 1; }
scr_enemy_follow_random(self);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();

//Create some bones!
audio_play_sound(snd_bones_fall, 0, false);
repeat(round(image_xscale * 30))
{
with (instance_create(x, y, obj_decal))
    {
    sprite_index = spr_skeleton_bones;
    image_index = irandom (image_number - 1);
    image_speed = 0;
    image_xscale = 0.5 + random(0.5);
    image_yscale = 0.5 + random(0.5);
    image_angle = random (360);
    speed = 2 + random(3);
    direction = (other.image_angle - 180) + 90 - random(180);
    }
}

//Create some money!
var drop = 0;

if drop = 0
{
    repeat(10)
    {
        with (instance_create(x, y, obj_decal))
        {
        sprite_index = spr_money;
        image_index = 0;
        image_speed = 0;
        image_xscale = 0.5 + random(0.5);
        image_yscale = 0.5 + random(0.5);
        image_angle = random (360);
        speed = 2 + random(3);
        direction = (other.image_angle - 180) + 90 - random(180);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var random_number;

random_number = irandom_range(5,20);

repeat(random_number) {
var object = instance_create(x-100+irandom(200), y-100+irandom(200), obj_enemy);
object.xx = object.x;
object.yy = object.y;
}

effect_create_below(ef_ring, x, y, 2, c_black);
effect_create_below(ef_ring, x, y, 2, c_orange);
effect_create_below(ef_ring, x, y, 2, c_blue);

alarm[1] = irandom_range(200,600);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Check to see if the enemy is in the room
mp_potential_step(xx, yy, spd, false);      //Move the enemy

if point_distance(x, y, xx, yy) &lt; spd * 2   //Check to see if it has reached the room entrance
{
go = true;                                  //It has, so ATTAAAACK!
}
else alarm[0] = 1;                          //It hasn't so repeat the alarm
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Attack the player!
if go
{
mp_potential_step(obj_controller.player_x[ii], obj_controller.player_y[ii], spd, false);
}

//Set up the image angle to rotate smoothly.
//Remove this and see what happens!!!
var dd,ts;
dd = ((((point_direction(x, y, obj_controller.player_x[ii], obj_controller.player_y[ii]) - image_angle) mod 360) + 540) mod 360) - 180;
image_angle += min(abs(dd), 5) * sign(dd);  

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_collision_parent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Basic collision

//Set up vars
var a,xoff,yoff,om,mm,mag;

a = point_direction(x, y, other.x, other.y);    //Get the direction from the colliding object
xoff = lengthdir_x(1, a);                       //Get the offset vector
yoff = lengthdir_y(1, a);
om = other.mass / mass;                         //start the fake "physics mass" calculations
mm = mass / other.mass;
mag = sqrt((om * om) + (mm * mm));
om /= mag;
mm /= mag;

//Move out of collision
while (place_meeting(x, y, other))
{
x -= xoff * om; //Move the instance out of collision
y -= yoff * om;
other.x += xoff * mm; //Move the other instance out of the collision
other.y += yoff * mm;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Draw shadow
draw_sprite_ext(sprite_index, image_index, x - 5, y + 5, image_xscale, image_xscale, image_angle, c_black, 0.5);
//Draw enemy sprite
draw_self();

var healthbar;
healthbar = (hp / hp_max) * 100;
draw_healthbar(x-32, y-32, x+32, y-28, healthbar, c_black, c_red, c_lime, 0, true, true)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
